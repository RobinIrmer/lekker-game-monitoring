/* tslint:disable */
/* eslint-disable */
/**
 * User and Team Management API
 * API for user and team management with JWT internal
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface InvitationResponse
 */
export interface InvitationResponse {
    /**
     * 
     * @type {string}
     * @memberof InvitationResponse
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof InvitationResponse
     */
    teamId: string;
    /**
     * 
     * @type {string}
     * @memberof InvitationResponse
     */
    membership: string;
    /**
     * 
     * @type {User}
     * @memberof InvitationResponse
     */
    user: User;
}

/**
 * Check if a given object implements the InvitationResponse interface.
 */
export function instanceOfInvitationResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "teamId" in value;
    isInstance = isInstance && "membership" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function InvitationResponseFromJSON(json: any): InvitationResponse {
    return InvitationResponseFromJSONTyped(json, false);
}

export function InvitationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvitationResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'teamId': json['teamId'],
        'membership': json['membership'],
        'user': UserFromJSON(json['user']),
    };
}

export function InvitationResponseToJSON(value?: InvitationResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userId': value.userId,
        'teamId': value.teamId,
        'membership': value.membership,
        'user': UserToJSON(value.user),
    };
}

